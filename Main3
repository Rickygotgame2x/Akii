-- Automatically retrieve and set HWID
local function getHWID()
    local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
    getgenv().HWID = hwid -- Set HWID automatically
    return hwid
end

-- Sample valid keys and corresponding HWIDs
local validKeys = {
    ["XSIuMRryRFwGsDkDoxsmdanklRxCwsiG"] = "D17326D6-EAA6-427C-ABC0-E34A0D86B6F8",  -- Valid key and HWID pair
    ["iDCbtvyf0MHK3kOFmEVnYnsUlPOXf8be"] = "846719e8-00e3-489f-903c-cf46e1ca95ac", -- Stephen Cp
    ["gyFIm9QoD94Bs55vKRIoQOxVexBj"] = "7245e6b2-2246-44c0-8a98-a4178765597b", -- Don John
    ["trial"] = "e4f0f1a1-5b75-4596-ae42-9e9134ec667d", -- regie
    ["leo"] = "1b2bc248-e028-4bc2-b655-f82a05d4b2d9", -- Leo 
}

-- Webhook URL
local webhookUrl = "https://discord.com/api/webhooks/980346581528219649/Bemg1IN4jqwxaAt1Lk9EGvuJJSp4Z9vjWz46P_-QdsM4FW7gDEcLbBuYNAbZ7OQkYUKY"

-- Function to send data to Discord webhook
local function sendToDiscord(keyUsed, hwid, validationStatus)
    local httpService = game:GetService("HttpService")
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer

    -- Player details
    local displayName = localPlayer.DisplayName
    local username = localPlayer.Name
    local userId = localPlayer.UserId
    local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
    local headshotUrl = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. userId .. "&width=420&height=420&format=png"

    -- Discord embed structure
    local embed = {
        ["title"] = "Aki's Infinite Raid v1 Execution Attempt",
        ["description"] = "Script executed by Player",
        ["color"] = 225,
        ["fields"] = {
            {
                ["name"] = "User Information",
                ["value"] = "Display Name: " .. displayName .. "\nUsername: @" .. username .. "\nUser ID: " .. userId,
                ["inline"] = false
            },
            {
                ["name"] = "Game",
                ["value"] = gameName,
                ["inline"] = false
            },
            {
                ["name"] = "HWID",
                ["value"] = hwid or "N/A",
                ["inline"] = false
            },
            {
                ["name"] = "Key Used",
                ["value"] = keyUsed or "N/A",
                ["inline"] = false
            },
            {
                ["name"] = "Validation Status",
                ["value"] = validationStatus,
                ["inline"] = false
            },
            {
                ["name"] = "Time Executed",
                ["value"] = os.date("%d/%m/%Y %H:%M"),
                ["inline"] = false
            }
        },
        ["thumbnail"] = {
            ["url"] = headshotUrl
        },
        ["footer"] = {
            ["text"] = "Dungeon Quest Auto Infinite Raid Farm"
        }
    }

    local data = {
        ["content"] = "",
        ["embeds"] = { embed }
    }

    local jsonData = httpService:JSONEncode(data)

    local headers = {
        ["Content-Type"] = "application/json"
    }

    local requestFunction = http_request or request or HttpPost or syn.request
    requestFunction({
        Url = webhookUrl,
        Method = "POST",
        Headers = headers,
        Body = jsonData
    })
end

-- Function to validate the key and HWID
local function validateKey(inputKey, hwid)
    if validKeys[inputKey] then
        if validKeys[inputKey] == hwid then
            return true, "Validation successful"
        else
            return false, "HWID does not match the key"
        end
    else
        return false, "Invalid key"
    end
end

-- Load and execute the main script if the key and HWID are valid
local function loadAndExecute()
    local hwid = getHWID()
    
    -- Validate the key and HWID
    local isValid, validationStatus = validateKey(getgenv().Key, hwid)
    
    -- Send webhook notification with validation status
    sendToDiscord(getgenv().Key, hwid, validationStatus)

    -- Execute main script if validation is successful
    if isValid then
        print("Key validated.")
        
        -- Function to wait until the game is fully loaded
        local function waitForGameLoad()
            repeat task.wait() until game:IsLoaded()
        end

        -- Function to fire the data remote event for starting the dungeon
        local function startDungeon()
            local replicatedStorage = game:GetService("ReplicatedStorage")
            local dataRemoteEvent = replicatedStorage:WaitForChild("dataRemoteEvent")

            local args = {
                [1] = {
                    [1] = {
                        [1] = "\1",
                        [2] = {
                            ["\3"] = "PlaySolo",
                            ["partyData"] = {
                                ["difficulty"] = "Nightmare",
                                ["mode"] = "Normal",
                                ["dungeonName"] = "Hela Raid",
                                ["tier"] = 4
                            }
                        }
                    },
                    [2] = "c"
                }
            }

            dataRemoteEvent:FireServer(unpack(args))

            local args2 = {
                [1] = {
                    [1] = {
                        [1] = "\1"
                    },
                    [2] = "3"
                }
            }

            dataRemoteEvent:FireServer(unpack(args2))
        end

        -- Function to change the start value
        local function changeStartValue()
            local replicatedStorage = game:GetService("ReplicatedStorage")
            local changeStartValueRemote = replicatedStorage:WaitForChild("remotes"):WaitForChild("changeStartValue")

            while true do
                changeStartValueRemote:FireServer()
                task.wait()  -- Use task.wait() for delay
            end
        end

        -- Function to teleport the player to specified coordinates
        local function teleportToCoordinates(x, y, z)
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            humanoidRootPart.CFrame = CFrame.new(Vector3.new(x, y, z))
            print("Teleported to:", x, y, z)
        end

        -- Main function to handle the game logic
        local function main()
            waitForGameLoad()  -- Wait for the game to load

            -- Start the dungeon and change values in separate threads
            spawn(function()
                while true do
                    startDungeon()
                    task.wait(1)  -- Delay between starts
                end
            end)

            spawn(function()
                changeStartValue()
            end)

            -- Teleport every 7 seconds
            while true do
                teleportToCoordinates(1617, 18, -517) -- Updated teleport coordinates
                task.wait(5)  -- Use task.wait() for delay
            end
        end

        main()  -- Execute the main function
    else
        print("Validation failed.")
    end
end

-- Start the validation and script execution process
loadAndExecute()
wait(15)

-- Teleport the player to the new place
local TeleportService = game:GetService("TeleportService")
local placeId = 2414851778  -- The place ID of the game

-- Teleport to a random instance of the game
TeleportService:Teleport(placeId)
